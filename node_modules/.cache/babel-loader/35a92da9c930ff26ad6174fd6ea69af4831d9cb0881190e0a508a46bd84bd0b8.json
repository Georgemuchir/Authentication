{"ast":null,"code":"import React,{useContext,useState,useEffect}from\"react\";import{auth}from\"../../firebase/firebase\";// import { GoogleAuthProvider } from \"firebase/auth\";\nimport{onAuthStateChanged}from\"firebase/auth\";import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/React.createContext();export function useAuth(){return useContext(AuthContext);}export function AuthProvider(_ref){let{children}=_ref;const[currentUser,setCurrentUser]=useState(null);const[userLoggedIn,setUserLoggedIn]=useState(false);const[isEmailUser,setIsEmailUser]=useState(false);const[isGoogleUser,setIsGoogleUser]=useState(false);const[loading,setLoading]=useState(true);useEffect(()=>{const unsubscribe=onAuthStateChanged(auth,initializeUser);return unsubscribe;},[]);async function initializeUser(user){if(user){setCurrentUser({...user});// check if provider is email and password login\nconst isEmail=user.providerData.some(provider=>provider.providerId===\"password\");setIsEmailUser(isEmail);// check if the auth provider is google or not\n//   const isGoogle = user.providerData.some(\n//     (provider) => provider.providerId === GoogleAuthProvider.PROVIDER_ID\n//   );\n//   setIsGoogleUser(isGoogle);\nsetUserLoggedIn(true);}else{setCurrentUser(null);setUserLoggedIn(false);}setLoading(false);}const value={userLoggedIn,isEmailUser,isGoogleUser,currentUser,setCurrentUser};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:!loading&&children});}","map":{"version":3,"names":["React","useContext","useState","useEffect","auth","onAuthStateChanged","jsx","_jsx","AuthContext","createContext","useAuth","AuthProvider","_ref","children","currentUser","setCurrentUser","userLoggedIn","setUserLoggedIn","isEmailUser","setIsEmailUser","isGoogleUser","setIsGoogleUser","loading","setLoading","unsubscribe","initializeUser","user","isEmail","providerData","some","provider","providerId","value","Provider"],"sources":["/home/george/Development/code/phase3/Authentication/src/contexts/authContext/index.jsx"],"sourcesContent":["import React, { useContext, useState, useEffect } from \"react\";\nimport { auth } from \"../../firebase/firebase\";\n// import { GoogleAuthProvider } from \"firebase/auth\";\nimport { onAuthStateChanged } from \"firebase/auth\";\n\nconst AuthContext = React.createContext();\n\nexport function useAuth() {\n  return useContext(AuthContext);\n}\n\nexport function AuthProvider({ children }) {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [userLoggedIn, setUserLoggedIn] = useState(false);\n  const [isEmailUser, setIsEmailUser] = useState(false);\n  const [isGoogleUser, setIsGoogleUser] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, initializeUser);\n    return unsubscribe;\n  }, []);\n\n  async function initializeUser(user) {\n    if (user) {\n\n      setCurrentUser({ ...user });\n\n      // check if provider is email and password login\n      const isEmail = user.providerData.some(\n        (provider) => provider.providerId === \"password\"\n      );\n      setIsEmailUser(isEmail);\n\n      // check if the auth provider is google or not\n    //   const isGoogle = user.providerData.some(\n    //     (provider) => provider.providerId === GoogleAuthProvider.PROVIDER_ID\n    //   );\n    //   setIsGoogleUser(isGoogle);\n\n      setUserLoggedIn(true);\n    } else {\n      setCurrentUser(null);\n      setUserLoggedIn(false);\n    }\n\n    setLoading(false);\n  }\n\n  const value = {\n    userLoggedIn,\n    isEmailUser,\n    isGoogleUser,\n    currentUser,\n    setCurrentUser\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n}\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAC9D,OAASC,IAAI,KAAQ,yBAAyB,CAC9C;AACA,OAASC,kBAAkB,KAAQ,eAAe,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEnD,KAAM,CAAAC,WAAW,cAAGR,KAAK,CAACS,aAAa,CAAC,CAAC,CAEzC,MAAO,SAAS,CAAAC,OAAOA,CAAA,CAAG,CACxB,MAAO,CAAAT,UAAU,CAACO,WAAW,CAAC,CAChC,CAEA,MAAO,SAAS,CAAAG,YAAYA,CAAAC,IAAA,CAAe,IAAd,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACvC,KAAM,CAACE,WAAW,CAAEC,cAAc,CAAC,CAAGb,QAAQ,CAAC,IAAI,CAAC,CACpD,KAAM,CAACc,YAAY,CAAEC,eAAe,CAAC,CAAGf,QAAQ,CAAC,KAAK,CAAC,CACvD,KAAM,CAACgB,WAAW,CAAEC,cAAc,CAAC,CAAGjB,QAAQ,CAAC,KAAK,CAAC,CACrD,KAAM,CAACkB,YAAY,CAAEC,eAAe,CAAC,CAAGnB,QAAQ,CAAC,KAAK,CAAC,CACvD,KAAM,CAACoB,OAAO,CAAEC,UAAU,CAAC,CAAGrB,QAAQ,CAAC,IAAI,CAAC,CAE5CC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAqB,WAAW,CAAGnB,kBAAkB,CAACD,IAAI,CAAEqB,cAAc,CAAC,CAC5D,MAAO,CAAAD,WAAW,CACpB,CAAC,CAAE,EAAE,CAAC,CAEN,cAAe,CAAAC,cAAcA,CAACC,IAAI,CAAE,CAClC,GAAIA,IAAI,CAAE,CAERX,cAAc,CAAC,CAAE,GAAGW,IAAK,CAAC,CAAC,CAE3B;AACA,KAAM,CAAAC,OAAO,CAAGD,IAAI,CAACE,YAAY,CAACC,IAAI,CACnCC,QAAQ,EAAKA,QAAQ,CAACC,UAAU,GAAK,UACxC,CAAC,CACDZ,cAAc,CAACQ,OAAO,CAAC,CAEvB;AACF;AACA;AACA;AACA;AAEEV,eAAe,CAAC,IAAI,CAAC,CACvB,CAAC,IAAM,CACLF,cAAc,CAAC,IAAI,CAAC,CACpBE,eAAe,CAAC,KAAK,CAAC,CACxB,CAEAM,UAAU,CAAC,KAAK,CAAC,CACnB,CAEA,KAAM,CAAAS,KAAK,CAAG,CACZhB,YAAY,CACZE,WAAW,CACXE,YAAY,CACZN,WAAW,CACXC,cACF,CAAC,CAED,mBACER,IAAA,CAACC,WAAW,CAACyB,QAAQ,EAACD,KAAK,CAAEA,KAAM,CAAAnB,QAAA,CAChC,CAACS,OAAO,EAAIT,QAAQ,CACD,CAAC,CAE3B"},"metadata":{},"sourceType":"module","externalDependencies":[]}